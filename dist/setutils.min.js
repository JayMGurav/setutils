(()=>{"use strict";Set.prototype.isSuperSet=function(e){return[...e].every((e=>this.has(e)))},Set.prototype.isSubSet=function(e){return[...this].every((t=>e.has(t)))},Set.prototype.union=function(...e){return e.reduce(((e,t)=>new Set([...e,...t])),this)},Set.prototype.intersection=function(...e){const t=e.concat(this),r=t.reduce(((e,t)=>e.size<t.size?e:t),this);return new Set([...r].filter((e=>t.every((t=>t.has(e))))))},Set.prototype.symmetricDifference=function(...e){return e.reduce(((e,t)=>{for(let r of t)e.has(r)?e.delete(r):e.add(r);return e}),this)},Set.prototype.setDifference=function(...e){const t=new Set(e.reduce(((e,t)=>e.concat([...t])),[]));return new Set([...this].filter((e=>!t.has(e))))},Set.prototype.cartesianProduct=function(e){return new Set([...this].reduce(((t,r)=>{let n=[];for(let t of e)n.push([r,t]);return t.concat(n)}),[]))}})();